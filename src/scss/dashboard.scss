// FIXME: Actually use these
$errorColor: red;
$successColor: #23d160;
$warningColor: hsl(39, 100%, 58%);
$infoColor: hsl(221, 100%, 37%);
$stateColors: (
    'error': $errorColor,
    'success': $successColor,
    'warning': $warningColor,
    'info': $infoColor,
);

$taskColors: (
    'error': $errorColor,
    'success': $successColor,
    'warning': $warningColor,
);

body {
    font-family: "Open Sans",arial,x-locale-body,sans-serif;
    line-height: 1.5;
}

.container {
    padding: 10px;
    margin: 0 auto;
    max-width: 1000px;
}

.hidden {
    display: none;
}

/********************
        Buttons
*********************/

button {
    cursor: pointer;
}

.zra-action {
    padding: 10px;
    font-size: 1rem;
    font-weight: 600;
    margin-right: 0.3em;
}

.actions {
    margin-bottom: 1em;
}

/********************
        Messages
*********************/

@mixin messageState($color) {
    border-color: $color;
    color: darken($color, 20%);
    background-color: lighten($color, 50%);
}

.message {
    border: 1px solid;
    border-radius: 4px;
    border-left-width: 6px;
    padding: 1.25em 1.5em;
    font-size: 1rem;

    &:not(:last-child) {
        margin-bottom: 1.5rem;
    }

    @each $state, $color in $stateColors {
        &.#{$state} {
            @include messageState($color);
        }
    }
}

/********************
        Logs
*********************/

@mixin logColoredLine($color, $backgroundColor, $borderColor, $iconColor) {
    color: $color;
    background-color: $backgroundColor;
    position: relative;

    .icon {
        color: $iconColor;
    }
}

.log {
    max-height: 300px;
    overflow-y: scroll;
    border: 1px solid #b7b7b7;
    border-radius: 3px;
    font-size: 11px;
    font-family: dejavu sans mono, monospace;
    
    .log-inner {
        border-collapse: collapse;

        .line {
            display: table-row;

            border-bottom: 1px solid rgb(240, 240, 240);

            &:last-child {
                border-bottom-width: 0;
            }

            &.error {
                @include logColoredLine(red, hsl(0, 100%, 97%), hsl(50, 100%, 88%), $errorColor);
            }
        
            &.warning {
                @include logColoredLine(hsl(39, 100%, 18%), hsl(50, 100%, 95%), hsl(50, 100%, 80%), $warningColor);
            }
        
            &.info {
                @include logColoredLine(hsl(221, 100%, 18%), hsl(231, 100%, 98%), hsl(231, 100%, 88%), $infoColor);
            }

            & > .cell {
                display: table-cell;
                padding: 0.1em 0.3em;
            }

            .timestamp {
                white-space: nowrap;
                color: gray;
            }

            .icon {
                min-width: 1em;
                text-align: center;
            }

            .content {
                width: 100%;
            }
        }
    }
}

#output {
    width: 100%;
}

/********************
        Tasks
*********************/

$taskBorderWidth: 1px;
$taskBorderRadius: 3px;

.task {
    &:not(:last-child) {
        margin-bottom: 1em;
    }

    & > .content {
        background: rgb(245, 245, 245);
        border: $taskBorderWidth solid rgb(139, 139, 139);
        border-radius: $taskBorderRadius;
        border-left-width: 5px;
        padding: 0.5em;
        .header {
            display: flex;
            .title {
                font-size: 1.2em;
                font-weight: bold;
                margin-bottom: 0.2em;
            }

            .subtasks-info {
                margin-left: auto;
                display: flex;
                white-space: nowrap;
                .item:not(:last-child) {
                    padding-right: 1em;
                }
                .icon {
                    padding-right: 0.2em;
                }
                @each $state, $color in $taskColors {
                    .#{$state} .icon {
                        color: $color;
                    }
                }
            }
        }

        progress {
            width: 100%;
        }

        .open-details .icon {
            white-space: nowrap;
            padding-right: 0.5em;
            &.closed-icon {
                display: inline-block;
            }
            &.open-icon {
                display: none;
            }
        }
    }

    @mixin taskState($color) {
        @include messageState($color);
    }
    
    @each $state, $color in $taskColors {
        &.#{$state} > .content {
            @include taskState($color);
        }
    }

    &.complete > .content progress {
        display: none;
    }

    & > .sub-tasks {
        display: none;
        background: #eee;
        padding: 1em;
        border: 1px solid #bdbdbd;
    }

    &.open {
        & > .content {
            border-bottom-width: 0;
            border-bottom-left-radius: 0;
            border-bottom-right-radius: 0;

            .open-details .icon {
                &.closed-icon {
                    display: none;
                }
                &.open-icon {
                    display: inline-block;
                }
            }
        }

        & > .sub-tasks {
            display: block;
        }
    }
}

.sub-task {
    margin-bottom: 0;
    &:not(:last-child) {
        // Override .task
        margin-bottom: 0;
    }
    
    & > .content {
        border-radius: 0;
        border-bottom-width: 0;
    }
    &:not(.open) {
        &:last-child > .content {
            border-bottom-width: $taskBorderWidth;
            border-bottom-left-radius: $taskBorderRadius;
            border-bottom-right-radius: $taskBorderRadius;
        }
        &:first-child > .content {
            border-top-width: $taskBorderWidth;
            border-top-left-radius: $taskBorderRadius;
            border-top-right-radius: $taskBorderRadius;
        }
    }
}

/********************
        Other
*********************/
