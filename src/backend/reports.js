import { taxTypeNamesInverted } from './constants';
import { clickElement, getDocumentByAjax } from './utils';

const reportCodes = {
  PENDING_LIABILITY: '10093',
  TAX_PAYER_LEDGER: '10085',
};

/**
 * Changes the page of a rslt report table.
 * Example rslt report tables include: pending liabilities and tax payer ledger.
 *
 * This will only work if `page` is not equal to the current page.
 * @param {number} tabId The ID of the tab with the report table.
 * @param {number} page The page to change to.
 */
export async function changeReportTablePage(tabId, page) {
  await clickElement(
    tabId,
    `#navTable>tbody>tr:nth-child(2) a[onclick="goToPageNum(${page})"]`,
    `go to page ${page} link`,
  );
}

/**
 * Converts an account name into a format that report requests accept. At the moment, the
 * conversion just converts the account name to uppercase.
 * @param {string} accountName
 * @returns {string}
 */
function convertAccountNameForHeaderString(accountName) {
  return accountName.toUpperCase();
}

/**
 * Converts JSON to a special string where each keys and values are separated by colons (:) and
 * key value pairs are separated by tildes (\~). For example,`key1:value1~key2:value2~`.
 *
 * This format is used by report AJAX requests.
 * @param {Object} data
 * @returns {string}
 */
function buildHeaderString(data) {
  let string = '';
  for (const key of Object.keys(data)) {
    const value = data[key];
    string += `${key}:${value}~`;
  }
  return string.replace(' ', '+');
}

/**
 *
 * @param {Object} options
 * @param {string} options.accountName
 * @param {string} options.fromDate
 * @param {string} options.toDate
 * @returns {string}
 */
function generateTaxPayerLedgerHeaderString({ accountName, fromDate, toDate }) {
  return buildHeaderString({
    'Account Name': convertAccountNameForHeaderString(accountName),
    'Date From': fromDate,
    'Date To': toDate,
  });
}

/**
 *
 * @param {Object} options
 * @param {string} options.accountName
 * @param {string} options.tpin Same as client's username.
 * @param {import('./constants').TaxTypeNumericalCode} options.taxTypeId
 * @returns {string}
 */
function generatePendingLiabilityHeaderString({ accountName, tpin, taxTypeId }) {
  return buildHeaderString({
    'Account Name': convertAccountNameForHeaderString(accountName),
    TPIN: tpin,
    // TODO: Check if the tax type name needs to be specially capitalized
    'Tax Type': taxTypeNamesInverted[taxTypeId],
  });
}

/**
 * Get the first page of the pending liabilities report.
 * @param {Object} options
 * @param {string} options.tpin Same as client's username.
 * @param {Object} options.extraData Extra parameters to send in the HTTP request.
 * @param {string} options.reportCode ID of the report to get.
 * @param {string} options.headerString String generated by `buildHeaderString`.
 * @param {string} [options.ajaxComboTarget]
 * @returns {Promise<Document>}
 */
export function getReportFirstPage({
  tpin,
  extraData,
  reportCode,
  headerString,
  ajaxComboTarget = '',
}) {
  const data = {
    actionCode: 'REPORTSEARCHRESULTSNEW',
    prm0_actionCode: 'RPRTPARAMETERPAGE',
    FromParaPage: 'TRUE',
    prm_tpin: tpin,
    prm0_tpin: tpin,
    tpin: null,
    prm_ajaxComboTarget: ajaxComboTarget,
    reportCode,
    prm0_reportCode: reportCode,
    // TODO: The header string doesn't seem to be needed so don't use it.
    hParaShowString: headerString,
    prm0_paraDisStr: headerString,
  };

  return getDocumentByAjax({
    url: 'https://www.zra.org.zm/frontController.do',
    method: 'post',
    data: { ...data, ...extraData },
  });
}

/**
 * Get the first page of the pending liabilities report.
 * @param {Object} options
 * @param {string} options.tpin Same as client's username.
 * @param {string} options.accountCode E.g. 119608 or 405534
 * @param {string} options.accountName E.g. john smith-income tax
 * @param {import('./constants').TaxTypeNumericalCode} options.taxTypeId
 * @returns {Promise<Document>}
 */
export function getPendingLiabilityFirstPage({
  tpin,
  accountCode,
  accountName,
  taxTypeId,
}) {
  return getReportFirstPage({
    tpin,
    reportCode: reportCodes.PENDING_LIABILITY,
    headerString: generatePendingLiabilityHeaderString({ accountName, tpin, taxTypeId }),
    ajaxComboTarget: 'accountName',
    extraData: {
      prm_accountName: accountCode,
      prm_TaxType: taxTypeId,
    },
  });
}

/**
 * Get the first page of the pending liabilities report.
 * @param {Object} options
 * @param {string} options.tpin Same as client's username.
 * @param {string} options.accountCode E.g. 119608 or 405534
 * @param {string} options.accountName E.g. john smith-income tax
 * @param {string} options.fromDate Format must be DD/MM/YYYY
 * @param {string} options.toDate Format must be DD/MM/YYYY
 * @returns {Promise<Document>}
 */
export function getTaxPayerLedgerFirstPage({
  tpin,
  accountCode,
  accountName,
  fromDate,
  toDate,
}) {
  return getReportFirstPage({
    tpin,
    reportCode: reportCodes.TAX_PAYER_LEDGER,
    headerString: generateTaxPayerLedgerHeaderString({ accountName, fromDate, toDate }),
    extraData: {
      prm_acntName: accountCode,
      prm_Dtfrom: fromDate,
      prm_Dtto: toDate,
    },
  });
}
